import logging
from ..common.common import SectionHandler
from ..section_handlers.document_acknowlegments import Acknowledgments
from ..section_handlers.document_references import DocumentReferences


class Vulnerabilities(SectionHandler):
    def __init__(self):
        super().__init__()
        self.csaf = []

    def _process_mandatory_elements(self, root_element):
        pass

    def _process_optional_elements(self, root_element):
        vulnerability = {}

        if hasattr(root_element, 'Acknowledgments'):
            # reuse Acknowledgments handler
            acknowledgments_handler = Acknowledgments()
            acknowledgments_handler.create_csaf(root_element.Acknowledgments)
            vulnerability['acknowledgments'] = acknowledgments_handler.csaf

        if hasattr(root_element, 'CVE'):
            # TODO: check the CSAF regex here? "^CVE-[0-9]{4}-[0-9]{4,}$" it differs from the CVRF regex
            vulnerability['cve'] = root_element.CVE.text

        if hasattr(root_element, 'CWE'):
            # TODO: same as CVE (regex)
            # TODO: validation of CWE: "It must be tested that given CWE exists and is valid."
            vulnerability['cwe'] = {}
            vulnerability['cwe']['id'] = root_element.CWE.attrib['ID']
            vulnerability['cwe']['name'] = root_element.CWE.text

        if hasattr(root_element, 'DiscoveryDate'):
            vulnerability['discovery_date'] = root_element.DiscoveryDate.text

        if hasattr(root_element, 'ID'):
            vulnerability['id'] = {}
            vulnerability['id']['system_name'] = root_element.ID.attrib['SystemName']
            vulnerability['id']['text'] = root_element.ID.text

        if hasattr(root_element, 'References'):
            # reuse DocumentReferences handler
            references_handler = DocumentReferences()
            references_handler.create_csaf(root_element.References)
            vulnerability['references'] = references_handler.csaf

        if hasattr(root_element, 'ReleaseDate'):
            vulnerability['release_date'] = root_element.ReleaseDate.text

        if hasattr(root_element, 'Title'):
            vulnerability['title'] = root_element.Title.text

        self.csaf.append(vulnerability)


