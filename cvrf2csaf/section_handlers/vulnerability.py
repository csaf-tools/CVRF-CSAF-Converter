import logging
from ..common.common import SectionHandler
from ..section_handlers.document_acknowlegments import Acknowledgments
from ..section_handlers.document_references import DocumentReferences
from ..section_handlers.document_notes import DocumentNotes


class Vulnerability(SectionHandler):
    def __init__(self):
        super().__init__()
        self.csaf = []

    def _process_mandatory_elements(self, root_element):
        pass

    def _process_optional_elements(self, root_element):
        vulnerability = {}

        if hasattr(root_element, 'Acknowledgments'):
            # reuse Acknowledgments handler
            acknowledgments_handler = Acknowledgments()
            acknowledgments_handler.create_csaf(root_element.Acknowledgments)
            vulnerability['acknowledgments'] = acknowledgments_handler.csaf

        if hasattr(root_element, 'CVE'):
            # "^CVE-[0-9]{4}-[0-9]{4,}$" differs from the CVRF regex. Will be checked by json schema validation.
            # TODO: double check, that no regex should be implemented here
            vulnerability['cve'] = root_element.CVE.text

        if hasattr(root_element, 'CWE'):
            CWE_elements = root_element.CWE
            if len(CWE_elements) > 1:
                logging.warning(f'{len(CWE_elements)} CWE elements found, using only the first one.')
            vulnerability['cwe'] = {'id': CWE_elements[0].attrib['ID'],
                                    'name': CWE_elements[0].text}

        if hasattr(root_element, 'DiscoveryDate'):
            vulnerability['discovery_date'] = root_element.DiscoveryDate.text

        if hasattr(root_element, 'ID'):
            vulnerability['id'] = {'system_name': root_element.ID.attrib['SystemName'],
                                   'text': root_element.ID.text}

        if hasattr(root_element, 'Notes'):
            # reuse DocumentNotes handler
            notes_handler = DocumentNotes(config=self.config)
            notes_handler.create_csaf(root_element.Notes)
            vulnerability['notes'] = notes_handler.csaf

        if hasattr(root_element, 'References'):
            # reuse DocumentReferences handler
            references_handler = DocumentReferences()
            references_handler.create_csaf(root_element.References)
            vulnerability['references'] = references_handler.csaf

        if hasattr(root_element, 'ReleaseDate'):
            vulnerability['release_date'] = root_element.ReleaseDate.text

        if hasattr(root_element, 'Title'):
            vulnerability['title'] = root_element.Title.text

        self.csaf.append(vulnerability)


